//Do not edit! This file was generated by Unity-ROS MessageGeneration.
using System;
using System.Linq;
using System.Collections.Generic;
using System.Text;
using Unity.Robotics.ROSTCPConnector.MessageGeneration;

namespace RosMessageTypes.Ur3Moveit
{
    public class PoseEstimationServiceRequest : Message
    {
        public const string RosMessageName = "ur3_moveit/PoseEstimationService";

        public Sensor.Image image;
        public Geometry.Pose cue_ball_pose;
        public Geometry.Pose[] balls_pose;
        public bool is_direct;

        public PoseEstimationServiceRequest()
        {
            this.image = new Sensor.Image();
            this.cue_ball_pose = new Geometry.Pose();
            this.balls_pose = new Geometry.Pose[0];
            this.is_direct = false;
        }

        public PoseEstimationServiceRequest(Sensor.Image image, Geometry.Pose cue_ball_pose, Geometry.Pose[] balls_pose, bool is_direct)
        {
            this.image = image;
            this.cue_ball_pose = cue_ball_pose;
            this.balls_pose = balls_pose;
            this.is_direct = is_direct;
        }
        public override List<byte[]> SerializationStatements()
        {
            var listOfSerializations = new List<byte[]>();
            listOfSerializations.AddRange(image.SerializationStatements());
            listOfSerializations.AddRange(cue_ball_pose.SerializationStatements());
            
            listOfSerializations.Add(BitConverter.GetBytes(balls_pose.Length));
            foreach(var entry in balls_pose)
                listOfSerializations.Add(entry.Serialize());
            listOfSerializations.Add(BitConverter.GetBytes(this.is_direct));

            return listOfSerializations;
        }

        public override int Deserialize(byte[] data, int offset)
        {
            offset = this.image.Deserialize(data, offset);
            offset = this.cue_ball_pose.Deserialize(data, offset);
            
            var balls_poseArrayLength = DeserializeLength(data, offset);
            offset += 4;
            this.balls_pose= new Geometry.Pose[balls_poseArrayLength];
            for(var i = 0; i < balls_poseArrayLength; i++)
            {
                this.balls_pose[i] = new Geometry.Pose();
                offset = this.balls_pose[i].Deserialize(data, offset);
            }
            this.is_direct = BitConverter.ToBoolean(data, offset);
            offset += 1;

            return offset;
        }

        public override string ToString()
        {
            return "PoseEstimationServiceRequest: " +
            "\nimage: " + image.ToString() +
            "\ncue_ball_pose: " + cue_ball_pose.ToString() +
            "\nballs_pose: " + System.String.Join(", ", balls_pose.ToList()) +
            "\nis_direct: " + is_direct.ToString();
        }
    }
}

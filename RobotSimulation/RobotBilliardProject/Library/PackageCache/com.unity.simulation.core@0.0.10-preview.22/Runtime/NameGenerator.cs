#if !UNITY_SIMULATION_SDK_DISABLED
#if UNITY_2019_3_OR_NEWER
using System;
using System.IO;
using System.Text;
using System.Threading;
using System.Collections.Generic;

using UnityEngine;

namespace Unity.Simulation
{
    /// <summary>
    /// Base class for all NameComponent classes.
    /// To create your own NameComponent derive from this an implement the needed virtual methods.
    /// </summary>
    [Serializable]
    public abstract class NameComponent
    {
        /// <summary>
        /// Each NameComponent can have a prefix and a suffix.
        /// Typical affixes are _ or .
        /// You can configure these in the inspector, or pass them in to the constructor.
        /// </summary>
        public string prefix = "";
        public string suffix = "";

        /// <summary>
        /// Constructor to pass in the affixes.
        /// </summary>
        /// <param name="prefix">This will be prepended to the output from this NameComponent.</param>
        /// <param name="suffix">This will be appended to the output from this NameComponent.</param>
        public NameComponent(string prefix = "", string suffix = "")
        {
            this.prefix = prefix;
            this.suffix = suffix;
        }

        /// <summary>
        /// Reset the NameComponent back to its configuration state.
        /// </summary>
        public virtual void Reset()
        {}

        /// <summary>
        /// Generate this NameComponent's part of the path.
        /// This will be appended to the previous path instance.
        /// </summary>
        /// <param name="path">Base path used to generate a new path.</param>
        /// <param name="modify">If false, the NameComponent will not modify its state. This is equivalent to Reset() followed by Generate().</param>
        /// <returns>The path component generated by this NameComponent</returns>
        public virtual string Generate(string path, bool modify = true)
        {
            return "";
        }
    }

    /// <summary>
    /// NameComponent that produces the directory path for the path.
    /// </summary>
    [Serializable]
    public class DirectoryNameComponent : NameComponent
    {
        /// <summary>
        /// Default Constructor
        /// </summary>
        public DirectoryNameComponent()
        {}

        /// <summary>
        /// Constructor to pass in the affixes.
        /// </summary>
        /// <param name="prefix">This will be prepended to the output from this NameComponent</param>
        /// <param name="suffix">This will be appended to the output from this NameComponent</param>
        public DirectoryNameComponent(string prefix = "", string suffix = "")
        {}

        /// <summary>
        /// Returns the directory portion of the base path.
        /// Directories will always end in a / and paths with \ will be converted to /
        /// </summary>
        /// <param name="path">Base path used to generate a new path.</param>
        /// <param name="modify">If false, the NameComponent will not modify its state. This is equivalent to Reset() followed by Generate().</param>
        /// <returns>The path component generated by this NameComponent</returns>
        public override string Generate(string path, bool modify = true)
        {
            return string.IsNullOrEmpty(path) ? "" : $"{prefix}{PathUtility.GetDirectoryName(path)}{suffix}";
        }
    }

    /// <summary>
    /// NameComponent that produces the filename (without the extension) for the path.
    /// </summary>
    [Serializable]
    public class FileNameComponent : NameComponent
    {
        /// <summary>
        /// Default Constructor
        /// </summary>
        public FileNameComponent()
        {}

        /// <summary>
        /// Constructor to pass in the affixes.
        /// </summary>
        /// <param name="prefix">This will be prepended to the output from this NameComponent</param>
        /// <param name="suffix">This will be appended to the output from this NameComponent</param>
        public FileNameComponent(string prefix = "", string suffix = "") : base(prefix, suffix)
        {}

        /// <summary>
        /// Returns the filename portion (without the extension) of the base path.
        /// </summary>
        /// <param name="path">Base path used to generate a new path.</param>
        /// <param name="modify">If false, the NameComponent will not modify its state. This is equivalent to Reset() followed by Generate().</param>
        /// <returns>The path component generated by this NameComponent</returns>
        public override string Generate(string path, bool modify = true)
        {
            return string.IsNullOrEmpty(path) ? "" :  $"{prefix}{PathUtility.GetFileNameWithoutExtension(path)}{suffix}";
        }
    }

    /// <summary>
    /// NameComponent that produces the file extension for the path.
    /// </summary>
    [Serializable]
    public class ExtensionNameComponent : NameComponent
    {
        /// <summary>
        /// Default Constructor
        /// </summary>
        public ExtensionNameComponent()
        {}

        /// <summary>
        /// Constructor to pass in the affixes.
        /// </summary>
        /// <param name="prefix">This will be prepended to the output from this NameComponent</param>
        /// <param name="suffix">This will be appended to the output from this NameComponent</param>
        public ExtensionNameComponent(string prefix = "", string suffix = "") : base(prefix, suffix)
        {}

        /// <summary>
        /// Returns the file extension portion of the base path.
        /// </summary>
        /// <param name="path">Base path used to generate a new path.</param>
        /// <param name="modify">If false, the NameComponent will not modify its state. This is equivalent to Reset() followed by Generate().</param>
        /// <returns>The path component generated by this NameComponent</returns>
        public override string Generate(string path, bool modify = true)
        {
            return string.IsNullOrEmpty(path) ? "" :  $"{prefix}{Path.GetExtension(PathUtility.FixPathSeparators(path))}{suffix}";
        }
    }

    /// <summary>
    /// NameComponent that applies a label to the path.
    /// </summary>
    [Serializable]
    public class LabelNameComponent : NameComponent
    {
        /// <summary>
        /// Label to be applied.
        /// </summary>
        public string label;

        /// <summary>
        /// Default Constructor.
        /// </summary>
        public LabelNameComponent()
        {}

        /// <summary>
        /// Constructor for passing in just the label.
        /// </summary>
        /// <param name="label">The label to be applied to the path.</param>
        public LabelNameComponent(string label)
        {
            this.label = label;
        }

        /// <summary>
        /// Constructor to pass in the affixes.
        /// </summary>
        /// <param name="label">The label to be applied to the path.</param>
        /// <param name="prefix">This will be prepended to the output from this NameComponent</param>
        /// <param name="suffix">This will be appended to the output from this NameComponent</param>
        public LabelNameComponent(string label, string prefix = "", string suffix = "") : base(prefix, suffix)
        {
            this.label = label;
        }

        /// <summary>
        /// Returns the label assigned to this NameComponent.
        /// </summary>
        /// <param name="path">Base path used to generate a new path.</param>
        /// <param name="modify">If false, the NameComponent will not modify its state. This is equivalent to Reset() followed by Generate().</param>
        /// <returns>The path component generated by this NameComponent</returns>
        public override string Generate(string path, bool modify = true)
        {
            return $"{prefix}{label}{suffix}";
        }
    }

    /// <summary>
    /// NameComponent that adds a sequence number to the path.
    /// </summary>
    [Serializable]
    public class SequenceNameComponent : NameComponent
    {
        /// <summary>
        /// The starting number for the sequence.
        /// </summary>
        public int start;

        /// <summary>
        /// The step to increase with each call to Generate.
        /// Negative numbers will cause the sequence to decrement.
        /// </summary>
        public int step;

        int sequence;

        /// <summary>
        /// Default Constructor
        /// </summary>
        public SequenceNameComponent()
        {
            start = 0;
            sequence = start;
            step = 1;
        }

        /// <summary>
        /// Constructor to specify the starting number and step.
        /// </summary>
        /// <param name="start">The number to start the sequence from.</param>
        /// <param name="step">The step to increase with each call to Generate. Negative numbers will cause the sequence to decrement.</param>
        public SequenceNameComponent(int start = 0, int step = 1)
        {
            this.sequence = this.start = start;
            this.step = step;
        }

        /// <summary>
        /// Constructor to pass in the affixes.
        /// </summary>
        /// <param name="start">The number to start the sequence from.</param>
        /// <param name="step">The step to increase with each call to Generate. Negative numbers will cause the sequence to decrement.</param>
        /// <param name="prefix">This will be prepended to the output from this NameComponent</param>
        /// <param name="suffix">This will be appended to the output from this NameComponent</param>
        public SequenceNameComponent(int start = 0, int step = 1, string prefix = "", string suffix = "") : base(prefix, suffix)
        {
            this.sequence = this.start = start;
            this.step = step;
        }

        /// <summary>
        /// Reset the SequenceNameComponent back to its configuration state.
        /// </summary>
        public override void Reset()
        {
            sequence = start;
        }

        /// <summary>
        /// Returns the current sequence value, and increments it by the step.
        /// </summary>
        /// <param name="path">Base path used to generate a new path.</param>
        /// <param name="modify">If false, the NameComponent will not modify its state. This is equivalent to Reset() followed by Generate().</param>
        /// <returns>The path component generated by this NameComponent</returns>
        public override string Generate(string path, bool modify = true)
        {
            var seq = sequence;
            if (modify)
                Interlocked.Add(ref sequence, step);
            return $"{prefix}{seq}{suffix}";
        }
    }

    /// <summary>
    /// NameComponent that adds a UTC timestamp to the path.
    /// </summary>
    [Serializable]
    public class TimestampNameComponent : NameComponent
    {
        Timer timer;

        /// <summary>
        /// Specifies the timer to use, which allows you to specify the time source.
        /// </summary>
        public TimerSource timerSource = TimerSource.Time;

        /// <summary>
        /// Specifies the number of digits of precision for the string representation.
        /// </summary>
        public int digitsOfPrecision;

        /// <summary>
        /// Default Constructor
        /// </summary>
        public TimestampNameComponent()
        {}

        /// <summary>
        /// Constructor to pass in the affixes.
        /// </summary>
        /// <param name="prefix">This will be prepended to the output from this NameComponent</param>
        /// <param name="suffix">This will be appended to the output from this NameComponent</param>
        /// <param name="digitsOfPrecision">Number of digits of precision to use for the timer's string representation</param>
        /// <param name="timerSource">Type of time data to retrieve from the timer</param>
        public TimestampNameComponent(
            string prefix = "",
            string suffix = "",
            int digitsOfPrecision = 0,
            TimerSource timerSource = TimerSource.UnixEpoch
        ) : base(prefix, suffix)
        {
            this.digitsOfPrecision = digitsOfPrecision;
            this.timerSource = timerSource;
        }

        /// <summary>
        /// Returns the current UTC timestamp.
        /// </summary>
        /// <param name="path">Base path used to generate a new path.</param>
        /// <param name="modify">If false, the NameComponent will not modify its state. This is equivalent to Reset() followed by Generate().</param>
        /// <returns>The path component generated by this NameComponent</returns>
        public override string Generate(string path, bool modify = true)
        {
            if (timer == null)
            {
                timer = new Timer();
                timer.timerSource = timerSource;
            }
            string output = $"{prefix}{timer.elapsedSeconds.ToString($"F{digitsOfPrecision}")}{suffix}";
            return output;
        }
    }

    /// <summary>
    /// NameComponent that adds the current frame number to the path.
    /// </summary>
    [Serializable]
    public class FrameNumberNameComponent : NameComponent
    {
        /// <summary>
        /// Default Constructor
        /// </summary>
        public FrameNumberNameComponent()
        {}

        /// <summary>
        /// Constructor to pass in the affixes.
        /// </summary>
        /// <param name="prefix">This will be prepended to the output from this NameComponent</param>
        /// <param name="suffix">This will be appended to the output from this NameComponent</param>
        public FrameNumberNameComponent(string prefix = "", string suffix = "") : base(prefix, suffix)
        {}

        /// <summary>
        /// Returns the current frame number.
        /// </summary>
        /// <param name="path">Base path used to generate a new path.</param>
        /// <param name="modify">If false, the NameComponent will not modify its state. This is equivalent to Reset() followed by Generate().</param>
        /// <returns>The path component generated by this NameComponent</returns>
        public override string Generate(string path, bool modify = true)
        {
            return $"{prefix}{Time.frameCount}{suffix}";
        }
    }

    /// <summary>
    /// Name Generator class. These can be created and configured in the editor.
    /// Certain components use these, and they can be assigned in the inspector.
    /// </summary>
    [CreateAssetMenu(fileName = "NameGenerator", menuName = "Simulation/NameGenerator", order = 1)]
    [Serializable]
    public class NameGenerator : ScriptableObject
    {
        /// <summary>
        /// The ordered list of NameComponent items that will be applied to the path.
        /// </summary>
#if UNITY_2019_3_OR_NEWER
        // This feature is required to use the editor, and is only available from 2019.3 and newer.
        [SerializeReference]
#endif
        public List<NameComponent> components = new List<NameComponent>();

        void OnEnable()
        {
            if (components != null && components.Count > 0)
                foreach (var component in this.components)
                    component.Reset();
        }

        /// <summary>
        /// Default constructor that populates starting with Directory, Filename, Extension.
        /// </summary>
        public NameGenerator()
        {
            components = new List<NameComponent>()
            {
                new DirectoryNameComponent(),
                new FileNameComponent(),
                new ExtensionNameComponent()
            };
        }

        /// <summary>
        /// Variable length constructor for adding components.
        /// var generator = new NameGenerator
        /// (
        ///     new DirectoryNameComponent(),
        ///     new FileNameComponent(),
        ///     new LabelNameComponent("LABEL"),
        ///     new TimestampNameComponent(),
        ///     new SequenceNameComponent(),
        ///     new ExtensionNameComponent()
        /// );
        /// </summary>
        /// <param name="components">Variable length set of NameComponents to add to the NameGenerator.</param>
        public NameGenerator(params NameComponent[] components)
        {
            this.components = new List<NameComponent>(components);
        }

        /// <summary>
        /// Insert a NameComponent into the ordered list.
        /// </summary>
        /// <param name="index">Where in the ordered list to create a new NameComponent.</param>
        /// <param name="type">Type of NameComponent to insert.</param>
        public void Insert(int index, Type type)
        {
            components.Insert(index, Activator.CreateInstance(type) as NameComponent);
        }

        /// <summary>
        /// Insert a NameComponent into the ordered list.
        /// </summary>
        /// <param name="index">Where in the ordered list to create a new NameComponent.</param>
        /// <param name="component">The NameComponent to insert.</param>
        public void Insert(int index, NameComponent component)
        {
            components.Insert(index, component);
        }

        /// <summary>
        /// Generate a new path from a base path.
        /// </summary>
        /// <param name="path">Base path used to generate a new path.</param>
        /// <param name="modify">If false, the NameComponent will not modify its state. This is equivalent to Reset() followed by Generate().</param>
        /// <returns>The path component generated by this NameComponent</returns>
        public string Generate(string path, bool modify = true)
        {
            string result = "";
            if (components != null && components.Count > 0)
                foreach (var component in components)
                    result += component.Generate(path, modify);
            return result;
        }
    }
}
#endif // UNITY_2019_3_OR_NEWER
#endif // !UNITY_SIMULATION_SDK_DISABLED
